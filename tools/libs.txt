#include <bits/stdc++.h>
using ll = long long;
using namespace std;

//コンビネーション
ll calcNumOfCombination(ll n, ll r) {
  ll num = 1;
  for (ll i = 1; i <= r; i++) {
    num = num * (n - i + 1) / i;
  }
  return num;
}

mint calcNumOfCombination_mint(mint n, mint r) {
  mint num = 1;
  for (mint i = 1; i.val() <= r.val(); i += 1) {
    num = num * (n - i + 1) / i;
  }
  return num;
}

mint calcNumOfCombination_mint2(mint n, mint r) {
  mint num = 1;
  for (mint i = 1; i.x <= r.x; i.x++) {
    num = num * (n - i + 1) / i;
  }
  return num;
}

//素因数分解
map<ll, ll> prime_factorization(ll n) {
  map<ll, ll> ans;
  ll a = 2;
  while (n >= a * a) {
    if (n % a == 0) {
      ans[a]++;
      n /= a;
    } else {
      a++;
    }
  }
  ans[n]++;

  return ans;
}

set<int> make_prime_set(int lim) {
  set<int> ps;
  vector<bool> chk(lim + 1, true);
  chk.at(0) = chk.at(1) = false;
  rep2(i, 2, chk.size()) {
    if (chk.at(i) == false) continue;
    ps.insert(i);
    for (int j = i + i; j < chk.size(); j += i) chk.at(j) = false;
  }
  return ps;
}

vector<bool> make_prime_bool_vec(int lim) {
  vector<bool> chk(lim + 1, true);
  chk.at(0) = chk.at(1) = false;
  rep2(i, 2, chk.size()) {
    if (chk.at(i) == false) continue;
    for (int j = i + i; j < chk.size(); j += i) chk.at(j) = false;
  }
  return chk;
}

vector<int> eulers_totient_function(int lim) {
  vector<int> res(lim, 0);
  rep(i, res.size()) { res.at(i) = i; }
  auto pv = make_prime_bool_vec(lim);
  rep(i, pv.size()) {
    if (!pv.at(i)) continue;
    int now = i;
    while (now < (int)res.size()) {
      res.at(now) /= i;
      res.at(now) *= (i - 1);
      now += i;
    }
  }
  return res;
}

ll modPow(ll a, ll n, ll p) {
  if (n == 0) return 1;  // 0乗にも対応する場合
  if (n == 1) return a % p;
  if (n % 2 == 1) return (a * modPow(a, n - 1, p)) % p;
  long long t = modPow(a, n / 2, p);
  return (t * t) % p;
}

// 行列積
vector<vector<mint>> matrix_mul(const vector<vector<mint>> &p,
                                const vector<vector<mint>> &q) {
  const int n = p.size();
  vector res(n, vector<mint>(n, 0));
  rep(k, n) rep(i, n) rep(j, n) {
    res.at(i).at(j) += p.at(i).at(k) * q.at(k).at(j);
  }
  return res;
}

// 行列累乗
vector<vector<mint>> matrix_exp(const vector<vector<mint>> &now, ll lv) {
  const int n = now.size();
  if (lv == 0) {
    vector res(n, vector<mint>(n, 0));
    rep(i, n) res.at(i).at(i) = 1;
    return res;
  }
  if (lv == 1) return now;
  if (lv % 2 == 1) return matrix_mul(now, matrix_exp(now, lv - 1));
  auto r = matrix_exp(now, lv / 2);
  return matrix_mul(r, r);
}

// 拡張ユークリッド互除法。a*x+b*y = g となるx,y,gを返す。
// 返り値gxyの符号注意
ll extgcd(ll a, ll b, ll &x, ll &y) {
  if (b == 0) {
    x = 1, y = 0;
    return a;
  }
  ll g = extgcd(b, a % b, y, x);
  y -= a / b * x;
  return g;
}

struct UnionFind {
  vector<int> d;
  UnionFind(int n) : d(n, -1) {}
  int find(int x) {
    if (d.at(x) < 0) return x;
    return d.at(x) = find(d.at(x));
  }
  bool unite(int x, int y) {
    x = find(x);
    y = find(y);
    if (x == y) return false;
    if (d.at(x) > d.at(y)) swap(x, y);
    d.at(x) += d.at(y);
    d.at(y) = x;
    return true;
  }
  bool same(int x, int y) { return find(x) == find(y); }
  int size(int x) { return -d.at(find(x)); }
};

struct UnionFind_hv {
  vector<int> d;
  vector<ll> weight;
  UnionFind_hv(int n) : d(n, -1), weight(n, 0) {}
  int find(int x) {
    if (d.at(x) < 0) return x;
    int ret = find(d.at(x));
    weight.at(x) += weight.at(d.at(x));
    return d.at(x) = ret;
  }
  ll get_weight(int x) {
    find(x);
    return weight.at(x);
  }
  ll diff(int x, int y) { return weight.at(y) - weight.at(x); }
  bool unite(int x, int y, ll w) {
    w += weight.at(x);
    w -= weight.at(y);
    x = find(x);
    y = find(y);
    if (x == y) return false;
    if (d.at(x) > d.at(y)) swap(x, y), w = -w;
    d.at(x) += d.at(y);
    d.at(y) = x;
    weight.at(y) = w;
    return true;
  }
  bool same(int x, int y) { return find(x) == find(y); }
  int size(int x) { return -d.at(find(x)); }
};

// 問題に合わせた調整が必要。
// 経路圧縮せず、直前のクエリを記憶する方針
// ABC302 Ex参考
struct RemovableUnionFind {
  map<int, vector<int>> memo;
  vector<int> d;
  vector<int> edge;
  int qe = 0;
  UnionFind(int n) : d(n, -1), edge(n, 0) {}
  int find(int x) {
    if (d.at(x) < 0) return x;
    return find(d.at(x));
  }
  int unite(int x, int y) {
    static int query_count = 0;
    x = find(x);
    y = find(y);
    if (x == y) {
      vector<int> mv = {0, x, 0};
      int bq = min(edge.at(x), size(x));
      edge.at(x)++;
      int aq = min(edge.at(x), size(x));
      mv.back() = aq - bq;
      qe += mv.back();
      memo[query_count] = mv;
      return query_count++;
    }
    if (d.at(x) > d.at(y)) swap(x, y);
    int bq = min(edge.at(x), size(x)) + min(edge.at(y), size(y));
    vector<int> mv = {1, x, y, d.at(y), 0};
    d.at(x) += d.at(y);
    edge.at(x) += edge.at(y) + 1;
    d.at(y) = x;
    int aq = min(edge.at(x), size(x));
    mv.back() = aq - bq;
    qe += mv.back();
    memo[query_count] = mv;
    return query_count++;
  }
  void remove(int qc) {
    auto v = memo[qc];
    assert(!v.empty());
    if (v.front() == 0) {
      assert(v.size() == 3);
      qe -= v.back();
      edge.at(v.at(1))--;
      return;
    }
    assert(v.size() == 5);
    int x = v.at(1), y = v.at(2), dd = v.at(3), qd = v.at(4);
    qe -= qd;
    d.at(y) = dd;
    edge.at(x) -= edge.at(y) + 1;
    d.at(x) -= d.at(y);
  }
  int get_qe() { return qe; }
  bool same(int x, int y) { return find(x) == find(y); }
  int size(int x) { return -d.at(find(x)); }
};

// 点と線分の距離
double pointline_distance(double x, double y, double x1, double y1, double x2,
                          double y2) {
  // PABの角が90度以上か？
  auto fc = [](double ax, double ay, double bx, double by, double px,
               double py) -> bool {
    pair<double, double> ab(bx - ax, by - ay), ap(px - ax, py - ay);
    double s = ab.first * ap.first + ab.second * ap.second;
    return s < 0;
  };
  if (fc(x1, y1, x2, y2, x, y)) {
    return hypot(x1 - x, y1 - y);
  }
  if (fc(x2, y2, x1, y1, x, y)) {
    return hypot(x2 - x, y2 - y);
  }
  double ax = y2 - y1, ay = x2 - x1;
  double d = fabs(ax * x - ay * y + x2 * y1 - y2 * x1);
  d /= sqrt((ax * ax) + (ay * ay));
  return d;
}

// 線分と線分の交差判定
bool crossing_check(int ax, int ay, int bx, int by, int x1, int y1, int x2,
                    int y2) {
  auto fc = [](int ax, int ay, int bx, int by, int x1, int y1, int x2,
               int y2) -> bool {
    ll sa = (ll)(ax - bx) * (y1 - ay) + (ll)(ay - by) * (ax - x1);
    ll sb = (ll)(ax - bx) * (y2 - ay) + (ll)(ay - by) * (ax - x2);
    return sa * sb < 0;
  };
  if (fc(ax, ay, bx, by, x1, y1, x2, y2) &&
      (fc(x1, y1, x2, y2, ax, ay, bx, by)))
    return true;
  return false;
};

// 線分と線分の距離（依存:線分と線分の交差判定）
double lineline_distance(int ax, int ay, int bx, int by, int x1, int y1, int x2,
                         int y2) {
  if (crossing_check(ax, ay, bx, by, x1, y1, x2, y2)) return 0;
  double res = pointline_distance(ax, ay, x1, y1, x2, y2);
  res = min(res, pointline_distance(bx, by, x1, y1, x2, y2));
  res = min(res, pointline_distance(x1, y1, ax, ay, bx, by));
  res = min(res, pointline_distance(x2, y2, ax, ay, bx, by));
  return res;
}

//ダイクストラ法(O(Elog(V)))
void dijkstra(vector<vector<pair<int, int>>> &gr, vector<ll> &d, int st) {
  int n = d.size();
  vector<bool> chk(n, false);
  rep(i, d.size()) d.at(i) = INF;
  priority_queue<pair<ll, int>> q;
  q.push({0, st});
  int co = 0;
  while (!q.empty()) {
    auto [cost, now] = q.top();
    q.pop();
    if (chk.at(now) == true) continue;
    cost *= -1;
    d.at(now) = cost;
    chk.at(now) = true;
    co++;
    if (co == n) break;
    for (auto [nx, nxcost] : gr.at(now)) {
      if (chk.at(nx) == true || d.at(nx) <= (cost + nxcost)) continue;
      q.push({-1 * (cost + nxcost), nx});
      d.at(nx) = cost + nxcost;
    }
  }
}

// LCS(最長共通部分列)
int LCS(string a, string b) {
  vector<vector<int>> dp(b.size() + 1, vector<int>(a.size() + 1));
  rep(i, b.size() + 1) {
    rep(j, a.size() + 1) {
      if (i == 0 || j == 0) {
        dp.at(i).at(j) = 0;
        continue;
      }
      if (a.at(j - 1) == b.at(i - 1))
        dp.at(i).at(j) = dp.at(i - 1).at(j - 1) + 1;
      else
        dp.at(i).at(j) = max(dp.at(i - 1).at(j), dp.at(i).at(j - 1));
    }
  }
  return dp.at(b.size()).at(a.size());
}

// 分数
struct frac {
  ll top = 0, btm = 1;
  frac(ll top, ll btm) : top(top), btm(btm) {}
  frac() {}
  friend bool operator<(const frac &l, const frac &r) {
    return l.top * r.btm < r.top * l.btm;
  }
  friend bool operator==(const frac &l, const frac &r) {
    return l.top * r.btm == r.top * l.btm;
  }
};

struct FenwickTree {  //入力は0インデックス
  vector<ll> d;
  FenwickTree(int n) : d(n, 0) {}
  bool _addD(int index, ll add) {
    if (index - 1 < 0 || index - 1 >= (int)d.size()) return false;
    d.at(index - 1) += add;
    return true;
  }
  void add(int index, int n) {
    index++;
    while (index != 0) {
      bool ret = _addD(index, n);
      if (ret == false) break;
      index += index & (-index);
    }
  }
  ll refer(int index) {
    index++;
    ll ret = 0;
    while (index != 0) {
      if (index > (int)d.size() || index <= 0) break;
      ret += d.at(index - 1);
      index -= index & (-index);
    }
    return ret;
  }
  ll refer(int l, int r) {  //[l, r]
    return refer(r) - refer(l - 1);
  }
};

// 区間pair(区間追加と区間削除は未検証)
struct IntervalPair {
  const ll INF = 8e18;
  set<pair<ll, ll>> se;
  IntervalPair() {
    se.insert({-INF, -INF});
    se.insert({INF, INF});
  }
  void insert(ll l, ll r) {
    assert(l < r);
    auto itr = se.lower_bound({l, -INF});
    if (r < itr->first) {
      itr--;
      if (l <= itr->second) {
        auto p = *itr;
        p.second = r;
        se.erase(itr);
        se.insert(p);
      } else {
        se.insert({l, r});
      }
      return;
    }
    auto p = *itr;
    se.erase(itr);
    p.first = l;
    se.insert(p);
    itr = se.lower_bound({l, -INF});
    itr--;
    if (l <= itr->second) {
      ll nl = itr->first;
      se.erase(itr);
      itr = se.lower_bound({l, -INF});
      auto q = *itr;
      q.first = nl;
      se.erase(itr);
      se.insert(q);
    }
  }
  bool remove(int l, int r) {
    assert(l < r);
    auto itr = se.upper_bound({l, INF});
    itr--;
    if (itr->second > r) {
      auto p = *itr;
      auto p1 = p, p2 = p;
      p1.second = l;
      p2.first = r;
      se.erase(itr);
      if (p1.first < p1.second) se.insert(p1);
      if (p2.first < p2.second) se.insert(p2);
      return true;
    }
    if (itr->second > l) {
      auto p = *itr;
      p.second = l;
      se.erase(itr);
      if (p.first < p.second) se.insert(p);
      return true;
    }
    itr = se.upper_bound({l, INF});
    if (itr->first < r) {
      auto p = *itr;
      p.first = r;
      se.erase(itr);
      if (p.first < p.second) se.insert(p);
      return true;
    }
    return false;
  }
  ll mex(ll start) {
    auto itr = se.upper_bound({start, INF});
    itr--;
    if (itr->second < start) return start;
    return itr->second;
  }
};

// Trie木
// ABC353-E参考
struct TrieTree {
  struct Node {
    using Key = char;
    using Value = int;
    Value value = 0;
    map<Key, int> edges;

    int next(Key key, vector<Node> &nodes) {
      auto itr = edges.find(key);
      if (itr != edges.end()) return itr->second;
      int res = nodes.size();
      edges[key] = res;
      nodes.push_back(Node());
      return res;
    }
  };
  vector<Node> nodes;

  ll operation(vector<string> &vs) {
    ll res = 0;
    nodes.push_back(Node());
    for (const auto &s : vs) {
      int nowId = 0;
      for (auto c : s) {
        auto &now = nodes.at(nowId);
        int nextId = now.next(c, nodes);
        auto &next = nodes.at(nextId);
        res += next.value;
        next.value++;
        nowId = nextId;
      }
    }
    return res;
  }
};

// auto mod int
// https://youtu.be/L8grWxBlIZ4?t=9858
// https://youtu.be/ERZuLAxZffQ?t=4807 : optimize
// https://youtu.be/8uowVvQ_-Mo?t=1329 : division
const int mod = 1000000007;
struct mint {
  ll x;  // typedef long long ll;
  mint(ll x = 0) : x((x % mod + mod) % mod) {}
  mint operator-() const { return mint(-x); }
  mint &operator+=(const mint a) {
    if ((x += a.x) >= mod) x -= mod;
    return *this;
  }
  mint &operator-=(const mint a) {
    if ((x += mod - a.x) >= mod) x -= mod;
    return *this;
  }
  mint &operator*=(const mint a) {
    (x *= a.x) %= mod;
    return *this;
  }
  mint operator+(const mint a) const {
    mint res(*this);
    return res += a;
  }
  mint operator-(const mint a) const {
    mint res(*this);
    return res -= a;
  }
  mint operator*(const mint a) const {
    mint res(*this);
    return res *= a;
  }
  mint pow(ll t) const {
    if (!t) return 1;
    mint a = pow(t >> 1);
    a *= a;
    if (t & 1) a *= *this;
    return a;
  }

  // for prime mod
  mint inv() const { return pow(mod - 2); }
  mint &operator/=(const mint a) { return (*this) *= a.inv(); }
  mint operator/(const mint a) const {
    mint res(*this);
    return res /= a;
  }
};

struct combination {
  vector<mint> fact, ifact;
  combination(int n) : fact(n + 1), ifact(n + 1) {
    assert(n < mod);
    fact[0] = 1;
    for (int i = 1; i <= n; ++i) fact[i] = fact[i - 1] * i;
    ifact[n] = fact[n].inv();
    for (int i = n; i >= 1; --i) ifact[i - 1] = ifact[i] * i;
  }
  mint operator()(int n, int k) {
    if (k < 0 || k > n) return 0;
    return fact[n] * ifact[k] * ifact[n - k];
  }
};

// 動的mod
// 同じmodではない場合の挙動は未定義
// mod 0 は単位元としての挙動をする(セグ木対応)
// DynamicMint +*-/ other には非対応。暗黙キャスト注意
struct DynamicMint {
  int mod;
  ll x;
  DynamicMint(int mod = 0, ll x = 0) : mod(mod), x(x) {
    if (mod != 0) {
      x = (x % mod + mod) % mod;
    }
  }
  bool operator==(const DynamicMint &a) const { return x == a.x; }
  DynamicMint operator-() const { return DynamicMint(mod, -x); }
  DynamicMint &operator+=(const DynamicMint a) {
    if (mod == 0) {
      x = a.x;
      mod = a.mod;
      return *this;
    }
    if (a.mod == 0) return *this;
    if ((x += a.x) >= mod) x -= mod;
    return *this;
  }
  DynamicMint &operator-=(const DynamicMint a) {
    if (mod == 0) {
      x = a.x;
      mod = a.mod;
      return *this;
    }
    if (a.mod == 0) return *this;
    if ((x += mod - a.x) >= mod) x -= mod;
    return *this;
  }
  DynamicMint &operator*=(const DynamicMint a) {
    if (mod == 0) {
      x = a.x;
      mod = a.mod;
      return *this;
    }
    if (a.mod == 0) return *this;
    (x *= a.x) %= mod;
    return *this;
  }
  DynamicMint operator+(const DynamicMint a) const {
    DynamicMint res(*this);
    return res += a;
  }
  DynamicMint operator-(const DynamicMint a) const {
    DynamicMint res(*this);
    return res -= a;
  }
  DynamicMint operator*(const DynamicMint a) const {
    DynamicMint res(*this);
    return res *= a;
  }
  DynamicMint pow(ll t) const {
    if (!t) return 1;
    DynamicMint a = pow(t >> 1);
    a *= a;
    if (t & 1) a *= *this;
    return a;
  }

  // for prime mod
  DynamicMint inv() const { return pow(mod - 2); }
  DynamicMint &operator/=(const DynamicMint a) {
    if (mod == 0) {
      x = a.x;
      mod = a.mod;
      return *this;
    }
    if (a.mod == 0) return *this;
    return (*this) *= a.inv();
  }
  DynamicMint operator/(const DynamicMint a) const {
    DynamicMint res(*this);
    return res /= a;
  }

  // for ordered map
  bool operator<(const DynamicMint &a) const {
    if (mod != a.mod) return mod < a.mod;
    return x < a.x;
  }
};

// ローリングハッシュ+セグ木+動的modについてはabc331-F参照
// ローリングハッシュ単体はABC353-E参考
struct RollingHash {
  const int PXSIZE = 4;
  using Key = tuple<DynamicMint, DynamicMint, DynamicMint, DynamicMint>;
  using Value = int;
  map<Key, Value> mp;
  vector<pair<int, int>> px;
  random_device rd;

  int randomNumber() {
    const int sz = 1000000000;
    int res = abs((int)rd());
    if (res < sz) res += sz;
    return res;
  }

  RollingHash() {
    auto fc = [](int x) {
      for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) return false;
      }
      return true;
    };
    while ((int)px.size() != PXSIZE) {
      int p = randomNumber();
      auto flg = fc(p);
      if (!flg) continue;
      int x = randomNumber();
      px.push_back({p, x});
    }
  }

  Key zeroHash() {
    vector<DynamicMint> res;
    for (auto [p, _] : px) {
      DynamicMint now(p, 0);
      res.push_back(now);
    }
    return {res.at(0), res.at(1), res.at(2), res.at(3)};
  }

  Key hash(const vector<int> &v) {
    vector<DynamicMint> res;
    for (auto [p, x] : px) {
      DynamicMint mx(p, x);
      DynamicMint now(p, 0);
      for (auto n : v) {
        now *= mx;
        now += DynamicMint(p, n);
      }
      res.push_back(now);
    }
    return {res.at(0), res.at(1), res.at(2), res.at(3)};
  }
  Key hash(const Key &p, int add) {
    vector<DynamicMint> ps;
    ps.push_back(get<0>(p));
    ps.push_back(get<1>(p));
    ps.push_back(get<2>(p));
    ps.push_back(get<3>(p));
    vector<DynamicMint> res;
    rep(i, PXSIZE) {
      auto [p, x] = px.at(i);
      DynamicMint now = ps.at(i);
      now *= DynamicMint(p, x);
      now += DynamicMint(p, add);
      res.push_back(now);
    }
    return {res.at(0), res.at(1), res.at(2), res.at(3)};
  }
  Key hash(const string &s) {
    vector<int> v(s.size());
    rep(i, s.size()) v.at(i) = s.at(i);
    return hash(v);
  }
};

LCAセット(30固定) {
  void dfs(vector<vector<int>> &tree, vector<vector<int>> &par,
           vector<int> &lv, int now) {
    for (auto nx : tree.at(now)) {
      if (lv.at(nx) != -1) continue;
      lv.at(nx) = lv.at(now) + 1;
      par.at(0).at(nx) = now;
      dfs(tree, par, lv, nx);
    }
  }

  int lca(vector<int> &dlv, vector<vector<int>> &par, int u, int v) {
    const int SZ = 30;
    if (dlv.at(u) < dlv.at(v)) swap(u, v);
    rep(i, SZ) {
      if (((dlv.at(u) - dlv.at(v)) & (1 << i)) != 0) {
        u = par.at(i).at(u);
      }
    }
    if (u == v) return u;
    rrep(i, SZ) {
      if (par.at(i).at(u) != par.at(i).at(v)) {
        u = par.at(i).at(u);
        v = par.at(i).at(v);
      }
    }
    return par.at(0).at(u);
  }
  main {
    vector<int> lv(n, -1);
    vector par(30, vector<int>(n, -1));
    lv.at(0) = 0;
    dfs(tree, par, lv, 0);
    rep(i, 29) {
      rep(now, n) {
        if (par.at(i).at(now) < 0)
          par.at(i + 1).at(now) = -1;
        else
          par.at(i + 1).at(now) = par.at(i).at(par.at(i).at(now));
      }
    }
  }
}

// マージソートの過程を残す木(セグ木関連)
// ABC339-G参考
struct MergeSortTree {
  using ll = long long;
  const int INF = 1001001001;
  unsigned int n;
  unsigned int width;
  vector<vector<int>> table;
  vector<vector<ll>> tableSum;
  MergeSortTree() {}
  MergeSortTree(unsigned int n) : n(n), width(bit_ceil(n)) {
    table.resize(bit_width(width));
    tableSum.resize(table.size());
    for (auto &v : table) v.resize(width, INF);
    for (auto &v : tableSum) v.resize(width, 0);
  }
  MergeSortTree(const vector<int> &input) : MergeSortTree(input.size()) {
    for (unsigned int i = 0; i < n; i++) {
      table.at(0).at(i) = input.at(i);
      tableSum.at(0).at(i) = input.at(i);
      assert(input.at(i) < INF);
    }
    for (unsigned int lv = 1, w = 2; lv < table.size(); lv++, w *= 2) {
      for (unsigned int l = 0; l < width; l += w) {
        unsigned int r = l + w;
        unsigned int i1 = l, i2 = l + (w / 2);
        for (unsigned int j = l; j < r; j++) {
          int p1 = INF + 5, p2 = INF + 5;
          if (i1 != l + w / 2) p1 = table.at(lv - 1).at(i1);
          if (i2 != r) p2 = table.at(lv - 1).at(i2);
          if (p1 < p2) {
            table.at(lv).at(j) = p1;
            tableSum.at(lv).at(j) = p1;
            i1++;
          } else {
            table.at(lv).at(j) = p2;
            tableSum.at(lv).at(j) = p2;
            i2++;
          }
          if (j != l) tableSum.at(lv).at(j) += tableSum.at(lv).at(j - 1);
        }
      }
    }
  }

  ll query(int l, int r, int x) { return qMain(l, r, x, table.size() - 1, 0); }
  ll qMain(int l, int r, int x, int lv, int base) {
    assert(lv >= 0);
    int w = (1 << lv);
    int wm = (w >> 1);
    if (l == base * w && r == (l + w)) return qSubAll(l, r, x, lv);
    int mid = base * w + wm;
    ll res = 0;
    if (l < mid) {
      res += qMain(l, min(r, mid), x, lv - 1, base * 2);
    }
    if (mid < r) {
      res += qMain(max(l, mid), r, x, lv - 1, base * 2 + 1);
    }
    return res;
  }
  ll qSubAll(int l, int r, int x, int lv) {
    int i1 = l - 1, i2 = r;
    while (i2 - i1 > 1) {
      int mid = (i2 + i1) / 2;
      if (table.at(lv).at(mid) <= x)
        i1 = mid;
      else
        i2 = mid;
    }
    if (i1 == l - 1) return 0;
    return tableSum.at(lv).at(i1);
  }
};

// z=yyyymmddx
unsigned long xor128() {
  static unsigned long x = 123456789, y = 362436069, z = 111100000,
                       w = 64813216;
  unsigned long t = (x ^ (x << 11));
  x = y;
  y = z;
  z = w;
  return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

const clock_t start_time = clock();
double time_from_clock() {
  return (double)(clock() - start_time) / CLOCKS_PER_SEC;
}

const double temp_start = 100;
const double temp_end = 1;
double now_time = time_from_clock();
double loop_start_time = time_from_clock();
double loop_end_time = 4.95;
double dist_now_time = (now_time - loop_start_time) / loop_time;
double temp_now = temp_start * (1 - dist_now_time) + temp_end * (dist_now_time);

int nxpoint = point_calc();
int bfpoint = point_calc();
double p = exp((nxpoint - bfpoint) / temp_now);
if (p > (xor128() % INF) / (double)INF) {
  ans = nxans;
  make_graph(gr, n, ans);
}
